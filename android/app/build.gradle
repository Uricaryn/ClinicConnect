plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.example.crm1"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.example.crm1"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

   signingConfigs {
    release {
        def keyProperties = new Properties()
        def keyPropertiesFile = rootProject.file("key.properties")
        if (keyPropertiesFile.exists()) {
            keyProperties.load(new FileInputStream(keyPropertiesFile))
        }

        storeFile file(keyProperties['storeFile'])
        storePassword keyProperties['storePassword']
        keyAlias keyProperties['keyAlias']
        keyPassword keyProperties['keyPassword']
    }
}


   buildTypes {
    release {
        // Kod küçültmeyi etkinleştirir
        minifyEnabled true
        // Kullanılmayan kaynakları temizler
        shrinkResources true
        // ProGuard kurallarını kullanır
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        signingConfig = signingConfigs.debug
        signingConfig = signingConfigs.release
    }
}
}

flutter {
    source = "../.."
}
